{
  "address": "0x9baa6c5D828B95a1dFD936F456daA85d5Da35092",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EduChain__CheckpointExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EduChain__GoBackToPreviousCheckpoint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EduChain__PathExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "changeTokenRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pathName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "noOfCheckpoints",
          "type": "uint256"
        }
      ],
      "name": "createGlobalCheckpoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pathName",
          "type": "string"
        }
      ],
      "name": "getUserCurrentCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "checkPoint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "pathName",
          "type": "string"
        }
      ],
      "name": "passCheckpoints",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "s_globalCheckpoints",
      "outputs": [
        {
          "internalType": "string",
          "name": "roadName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "numberOfCheckpoints",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRewardsPerCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "progress",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pass",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4046475c167adf0b37fb5236a3a77f3f70c4b63ed354dab90847ab2c649ad2cc",
  "receipt": {
    "to": null,
    "from": "0x7476deB582C24610511D16266E972DF5d2895bc7",
    "contractAddress": "0x9baa6c5D828B95a1dFD936F456daA85d5Da35092",
    "transactionIndex": 1,
    "gasUsed": "1330111",
    "logsBloom": "0x
    "blockHash": "0x97bcb0a6c652716ae239b926f7bff2b8091f0a677d997744ae2fb6b4762f1eb6",
    "transactionHash": "0x4046475c167adf0b37fb5236a3a77f3f70c4b63ed354dab90847ab2c649ad2cc",
    "logs": [],
    "blockNumber": 151769426,
    "cumulativeGasUsed": "1526552",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6fa00C2aEafDca0462087DF390Ac3AC4F59d351e",
    "0x243A476DE208b9d3b84caF1eb89881F2F76882d1"
  ],
  "numDeployments": 1,
  "solcInputHash": "27f00c4f49731ff0d7309014f5a8e91a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EduChain__CheckpointExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EduChain__GoBackToPreviousCheckpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EduChain__PathExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeTokenRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"noOfCheckpoints\",\"type\":\"uint256\"}],\"name\":\"createGlobalCheckpoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pathName\",\"type\":\"string\"}],\"name\":\"getUserCurrentCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"checkPoint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pathName\",\"type\":\"string\"}],\"name\":\"passCheckpoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"s_globalCheckpoints\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"roadName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"numberOfCheckpoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRewardsPerCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"progress\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pass\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"createGlobalCheckpoints(string,uint256)\":{\"params\":{\"noOfCheckpoints\":\": Number of checkpoints on the course\",\"pathName\":\": Name of the course roadmap\"}},\"passCheckpoints(uint256,string)\":{\"params\":{\"checkPoint\":\": Checkpoint to pass on the roadmap\",\"pathName\":\": Name of the course roadmap\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createGlobalCheckpoints(string,uint256)\":{\"notice\":\"Method for creating a global checkpoint for a particular roadmap\"},\"passCheckpoints(uint256,string)\":{\"notice\":\"Method for passing each checkPoint and tracking on the blockchain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EduContract.sol\":\"EduChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/EduContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n// contract address: 0x86022BfC78f8769fCA6165264a5a9049c363115C\\n\\nerror EduChain__PathExists();\\nerror EduChain__NotOwner();\\nerror EduChain__CheckpointExceeded();\\nerror EduChain__GoBackToPreviousCheckpoint();\\n\\ninterface MintingInterface {\\n    function mint(address account, uint256 amount) external;\\n\\n    function mintNft() external;\\n}\\n\\ncontract EduChain is ReentrancyGuard {\\n    uint256 public tokenRewardsPerCheckpoint;\\n    address internal immutable tokenAddress;\\n    address internal immutable nftAddress;\\n\\n    struct Roadmap {\\n        string roadName;\\n        uint256 numberOfCheckpoints;\\n    }\\n\\n    struct Track {\\n        uint256 progress;\\n        bool pass;\\n    }\\n\\n    mapping(string => Roadmap) public s_globalCheckpoints;\\n    mapping(address => mapping(string => mapping(uint256 => Track)))\\n        public verify;\\n\\n    constructor(address _tokenAddress, address _nftAddress) {\\n        tokenAddress = _tokenAddress;\\n        nftAddress = _nftAddress;\\n    }\\n\\n    // Main Functions\\n\\n    /**\\n     * @notice Method for creating a global checkpoint for a particular roadmap\\n     * @param pathName: Name of the course roadmap\\n     * @param noOfCheckpoints: Number of checkpoints on the course\\n     */\\n\\n    function createGlobalCheckpoints(\\n        string memory pathName,\\n        uint256 noOfCheckpoints\\n    ) external {\\n        if (s_globalCheckpoints[pathName].numberOfCheckpoints > 0)\\n            revert EduChain__PathExists();\\n        s_globalCheckpoints[pathName] = Roadmap(pathName, noOfCheckpoints);\\n    }\\n\\n    /**\\n     * @notice Method for passing each checkPoint and tracking on the blockchain\\n     * @param pathName: Name of the course roadmap\\n     * @param checkPoint: Checkpoint to pass on the roadmap\\n     */\\n\\n    function passCheckpoints(\\n        uint256 checkPoint,\\n        string memory pathName\\n    ) external returns (bool) {\\n        if (\\n            checkPoint > s_globalCheckpoints[pathName].numberOfCheckpoints ||\\n            checkPoint <= 0\\n        ) revert EduChain__CheckpointExceeded();\\n        bool isCertified;\\n        if (checkPoint == 1) {\\n            isCertified = _mintRewards();\\n        }\\n        if (checkPoint > 1) {\\n            bool check = verify[msg.sender][pathName][checkPoint - 1].pass;\\n            if (!check) revert EduChain__GoBackToPreviousCheckpoint();\\n            isCertified = _mintRewards();\\n        }\\n\\n        verify[msg.sender][pathName][checkPoint].progress = checkPoint;\\n        return isCertified;\\n    }\\n\\n    ////// INTERNAL FUNCTIONS\\n\\n    function _mintRewards() internal returns (bool) {\\n        MintingInterface mintToken = MintingInterface(tokenAddress);\\n        mintToken.mint(msg.sender, tokenRewardsPerCheckpoint);\\n        MintingInterface mintNft = MintingInterface(nftAddress);\\n        mintNft.mintNft();\\n        return true;\\n    }\\n\\n    //////////////////////\\n    // Getter Functions //\\n    //////////////////////\\n\\n    function changeTokenRewards(uint256 value) external {\\n        tokenRewardsPerCheckpoint = value;\\n    }\\n\\n    function getUserCurrentCheckpoint(\\n        string memory pathName\\n    ) external view returns (uint256) {\\n        return verify[msg.sender][pathName][1].progress;\\n    }\\n}\\n\",\"keccak256\":\"0x0591928d94cfb141d884a92f52daa46033952704187793bf174b6fc92ec7cfa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200114038038062001140833981810160405281019062000037919062000119565b60016000819055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505062000160565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e182620000b4565b9050919050565b620000f381620000d4565b8114620000ff57600080fd5b50565b6000815190506200011381620000e8565b92915050565b60008060408385031215620001335762000132620000af565b5b6000620001438582860162000102565b9250506020620001568582860162000102565b9150509250929050565b60805160a051610fba62000186600039600061066b015260006105d70152610fba6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063447cf3ad1161005b578063447cf3ad146100ea578063bc093ae11461011b578063bf92be4d1461014b578063f0e755671461017c5761007d565b806319b27942146100825780632ffdc4bc1461009e5780633e5d9f71146100ba575b600080fd5b61009c6004803603810190610097919061073f565b61019a565b005b6100b860048036038101906100b391906108b2565b6101a4565b005b6100d460048036038101906100cf919061090e565b61025a565b6040516100e19190610966565b60405180910390f35b61010460048036038101906100ff91906109df565b6102d4565b604051610112929190610a69565b60405180910390f35b61013560048036038101906101309190610a92565b610335565b6040516101429190610aee565b60405180910390f35b6101656004803603810190610160919061090e565b61050a565b604051610173929190610b88565b60405180910390f35b6101846105cc565b6040516101919190610966565b60405180910390f35b8060018190555050565b60006002836040516101b69190610bf4565b9081526020016040518091039020600101541115610200576040517f7d056ac200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060400160405280838152602001828152506002836040516102259190610bf4565b908152602001604051809103902060008201518160000190816102489190610e17565b50602082015181600101559050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516102a99190610bf4565b9081526020016040518091039020600060018152602001908152602001600020600001549050919050565b60036020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010160009054906101000a900460ff16905082565b60006002826040516103479190610bf4565b908152602001604051809103902060010154831180610367575060008311155b1561039e576040517f3b73d11c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600184036103b3576103b06105d2565b90505b600184111561048c576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460405161040b9190610bf4565b908152602001604051809103902060006001876104289190610f18565b815260200190815260200160002060010160009054906101000a900460ff16905080610480576040517fff81f50500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104886105d2565b9150505b83600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846040516104da9190610bf4565b90815260200160405180910390206000868152602001908152602001600020600001819055508091505092915050565b60028180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461054390610c3a565b80601f016020809104026020016040519081016040528092919081815260200182805461056f90610c3a565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b5050505050908060010154905082565b60015481565b6000807f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff166340c10f19336001546040518363ffffffff1660e01b8152600401610635929190610f5b565b600060405180830381600087803b15801561064f57600080fd5b505af1158015610663573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663c2229fea6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b5050505060019250505090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61071c81610709565b811461072757600080fd5b50565b60008135905061073981610713565b92915050565b600060208284031215610755576107546106ff565b5b60006107638482850161072a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107bf82610776565b810181811067ffffffffffffffff821117156107de576107dd610787565b5b80604052505050565b60006107f16106f5565b90506107fd82826107b6565b919050565b600067ffffffffffffffff82111561081d5761081c610787565b5b61082682610776565b9050602081019050919050565b82818337600083830152505050565b600061085561085084610802565b6107e7565b90508281526020810184848401111561087157610870610771565b5b61087c848285610833565b509392505050565b600082601f8301126108995761089861076c565b5b81356108a9848260208601610842565b91505092915050565b600080604083850312156108c9576108c86106ff565b5b600083013567ffffffffffffffff8111156108e7576108e6610704565b5b6108f385828601610884565b92505060206109048582860161072a565b9150509250929050565b600060208284031215610924576109236106ff565b5b600082013567ffffffffffffffff81111561094257610941610704565b5b61094e84828501610884565b91505092915050565b61096081610709565b82525050565b600060208201905061097b6000830184610957565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ac82610981565b9050919050565b6109bc816109a1565b81146109c757600080fd5b50565b6000813590506109d9816109b3565b92915050565b6000806000606084860312156109f8576109f76106ff565b5b6000610a06868287016109ca565b935050602084013567ffffffffffffffff811115610a2757610a26610704565b5b610a3386828701610884565b9250506040610a448682870161072a565b9150509250925092565b60008115159050919050565b610a6381610a4e565b82525050565b6000604082019050610a7e6000830185610957565b610a8b6020830184610a5a565b9392505050565b60008060408385031215610aa957610aa86106ff565b5b6000610ab78582860161072a565b925050602083013567ffffffffffffffff811115610ad857610ad7610704565b5b610ae485828601610884565b9150509250929050565b6000602082019050610b036000830184610a5a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b43578082015181840152602081019050610b28565b60008484015250505050565b6000610b5a82610b09565b610b648185610b14565b9350610b74818560208601610b25565b610b7d81610776565b840191505092915050565b60006040820190508181036000830152610ba28185610b4f565b9050610bb16020830184610957565b9392505050565b600081905092915050565b6000610bce82610b09565b610bd88185610bb8565b9350610be8818560208601610b25565b80840191505092915050565b6000610c008284610bc3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c5257607f821691505b602082108103610c6557610c64610c0b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ccd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c90565b610cd78683610c90565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d14610d0f610d0a84610709565b610cef565b610709565b9050919050565b6000819050919050565b610d2e83610cf9565b610d42610d3a82610d1b565b848454610c9d565b825550505050565b600090565b610d57610d4a565b610d62818484610d25565b505050565b5b81811015610d8657610d7b600082610d4f565b600181019050610d68565b5050565b601f821115610dcb57610d9c81610c6b565b610da584610c80565b81016020851015610db4578190505b610dc8610dc085610c80565b830182610d67565b50505b505050565b600082821c905092915050565b6000610dee60001984600802610dd0565b1980831691505092915050565b6000610e078383610ddd565b9150826002028217905092915050565b610e2082610b09565b67ffffffffffffffff811115610e3957610e38610787565b5b610e438254610c3a565b610e4e828285610d8a565b600060209050601f831160018114610e815760008415610e6f578287015190505b610e798582610dfb565b865550610ee1565b601f198416610e8f86610c6b565b60005b82811015610eb757848901518255600182019150602085019450602081019050610e92565b86831015610ed45784890151610ed0601f891682610ddd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2382610709565b9150610f2e83610709565b9250828203905081811115610f4657610f45610ee9565b5b92915050565b610f55816109a1565b82525050565b6000604082019050610f706000830185610f4c565b610f7d6020830184610957565b939250505056fea2646970667358221220ccad5191a4ee640b63a443fb1436ea8b318cb470f3c101bf47a791ca3f959cf764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063447cf3ad1161005b578063447cf3ad146100ea578063bc093ae11461011b578063bf92be4d1461014b578063f0e755671461017c5761007d565b806319b27942146100825780632ffdc4bc1461009e5780633e5d9f71146100ba575b600080fd5b61009c6004803603810190610097919061073f565b61019a565b005b6100b860048036038101906100b391906108b2565b6101a4565b005b6100d460048036038101906100cf919061090e565b61025a565b6040516100e19190610966565b60405180910390f35b61010460048036038101906100ff91906109df565b6102d4565b604051610112929190610a69565b60405180910390f35b61013560048036038101906101309190610a92565b610335565b6040516101429190610aee565b60405180910390f35b6101656004803603810190610160919061090e565b61050a565b604051610173929190610b88565b60405180910390f35b6101846105cc565b6040516101919190610966565b60405180910390f35b8060018190555050565b60006002836040516101b69190610bf4565b9081526020016040518091039020600101541115610200576040517f7d056ac200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060400160405280838152602001828152506002836040516102259190610bf4565b908152602001604051809103902060008201518160000190816102489190610e17565b50602082015181600101559050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020826040516102a99190610bf4565b9081526020016040518091039020600060018152602001908152602001600020600001549050919050565b60036020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050508060000154908060010160009054906101000a900460ff16905082565b60006002826040516103479190610bf4565b908152602001604051809103902060010154831180610367575060008311155b1561039e576040517f3b73d11c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600184036103b3576103b06105d2565b90505b600184111561048c576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460405161040b9190610bf4565b908152602001604051809103902060006001876104289190610f18565b815260200190815260200160002060010160009054906101000a900460ff16905080610480576040517fff81f50500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104886105d2565b9150505b83600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846040516104da9190610bf4565b90815260200160405180910390206000868152602001908152602001600020600001819055508091505092915050565b60028180516020810182018051848252602083016020850120818352809550505050505060009150905080600001805461054390610c3a565b80601f016020809104026020016040519081016040528092919081815260200182805461056f90610c3a565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b5050505050908060010154905082565b60015481565b6000807f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff166340c10f19336001546040518363ffffffff1660e01b8152600401610635929190610f5b565b600060405180830381600087803b15801561064f57600080fd5b505af1158015610663573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000090508073ffffffffffffffffffffffffffffffffffffffff1663c2229fea6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b5050505060019250505090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61071c81610709565b811461072757600080fd5b50565b60008135905061073981610713565b92915050565b600060208284031215610755576107546106ff565b5b60006107638482850161072a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6107bf82610776565b810181811067ffffffffffffffff821117156107de576107dd610787565b5b80604052505050565b60006107f16106f5565b90506107fd82826107b6565b919050565b600067ffffffffffffffff82111561081d5761081c610787565b5b61082682610776565b9050602081019050919050565b82818337600083830152505050565b600061085561085084610802565b6107e7565b90508281526020810184848401111561087157610870610771565b5b61087c848285610833565b509392505050565b600082601f8301126108995761089861076c565b5b81356108a9848260208601610842565b91505092915050565b600080604083850312156108c9576108c86106ff565b5b600083013567ffffffffffffffff8111156108e7576108e6610704565b5b6108f385828601610884565b92505060206109048582860161072a565b9150509250929050565b600060208284031215610924576109236106ff565b5b600082013567ffffffffffffffff81111561094257610941610704565b5b61094e84828501610884565b91505092915050565b61096081610709565b82525050565b600060208201905061097b6000830184610957565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ac82610981565b9050919050565b6109bc816109a1565b81146109c757600080fd5b50565b6000813590506109d9816109b3565b92915050565b6000806000606084860312156109f8576109f76106ff565b5b6000610a06868287016109ca565b935050602084013567ffffffffffffffff811115610a2757610a26610704565b5b610a3386828701610884565b9250506040610a448682870161072a565b9150509250925092565b60008115159050919050565b610a6381610a4e565b82525050565b6000604082019050610a7e6000830185610957565b610a8b6020830184610a5a565b9392505050565b60008060408385031215610aa957610aa86106ff565b5b6000610ab78582860161072a565b925050602083013567ffffffffffffffff811115610ad857610ad7610704565b5b610ae485828601610884565b9150509250929050565b6000602082019050610b036000830184610a5a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b43578082015181840152602081019050610b28565b60008484015250505050565b6000610b5a82610b09565b610b648185610b14565b9350610b74818560208601610b25565b610b7d81610776565b840191505092915050565b60006040820190508181036000830152610ba28185610b4f565b9050610bb16020830184610957565b9392505050565b600081905092915050565b6000610bce82610b09565b610bd88185610bb8565b9350610be8818560208601610b25565b80840191505092915050565b6000610c008284610bc3565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c5257607f821691505b602082108103610c6557610c64610c0b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ccd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c90565b610cd78683610c90565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d14610d0f610d0a84610709565b610cef565b610709565b9050919050565b6000819050919050565b610d2e83610cf9565b610d42610d3a82610d1b565b848454610c9d565b825550505050565b600090565b610d57610d4a565b610d62818484610d25565b505050565b5b81811015610d8657610d7b600082610d4f565b600181019050610d68565b5050565b601f821115610dcb57610d9c81610c6b565b610da584610c80565b81016020851015610db4578190505b610dc8610dc085610c80565b830182610d67565b50505b505050565b600082821c905092915050565b6000610dee60001984600802610dd0565b1980831691505092915050565b6000610e078383610ddd565b9150826002028217905092915050565b610e2082610b09565b67ffffffffffffffff811115610e3957610e38610787565b5b610e438254610c3a565b610e4e828285610d8a565b600060209050601f831160018114610e815760008415610e6f578287015190505b610e798582610dfb565b865550610ee1565b601f198416610e8f86610c6b565b60005b82811015610eb757848901518255600182019150602085019450602081019050610e92565b86831015610ed45784890151610ed0601f891682610ddd565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2382610709565b9150610f2e83610709565b9250828203905081811115610f4657610f45610ee9565b5b92915050565b610f55816109a1565b82525050565b6000604082019050610f706000830185610f4c565b610f7d6020830184610957565b939250505056fea2646970667358221220ccad5191a4ee640b63a443fb1436ea8b318cb470f3c101bf47a791ca3f959cf764736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "createGlobalCheckpoints(string,uint256)": {
        "params": {
          "noOfCheckpoints": ": Number of checkpoints on the course",
          "pathName": ": Name of the course roadmap"
        }
      },
      "passCheckpoints(uint256,string)": {
        "params": {
          "checkPoint": ": Checkpoint to pass on the roadmap",
          "pathName": ": Name of the course roadmap"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createGlobalCheckpoints(string,uint256)": {
        "notice": "Method for creating a global checkpoint for a particular roadmap"
      },
      "passCheckpoints(uint256,string)": {
        "notice": "Method for passing each checkPoint and tracking on the blockchain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2893,
        "contract": "contracts/EduContract.sol:EduChain",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2991,
        "contract": "contracts/EduContract.sol:EduChain",
        "label": "tokenRewardsPerCheckpoint",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3010,
        "contract": "contracts/EduContract.sol:EduChain",
        "label": "s_globalCheckpoints",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Roadmap)3000_storage)"
      },
      {
        "astId": 3019,
        "contract": "contracts/EduContract.sol:EduChain",
        "label": "verify",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_struct(Track)3005_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_struct(Track)3005_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => mapping(uint256 => struct EduChain.Track)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_struct(Track)3005_storage))"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_uint256,t_struct(Track)3005_storage))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(uint256 => struct EduChain.Track))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Track)3005_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Roadmap)3000_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct EduChain.Roadmap)",
        "numberOfBytes": "32",
        "value": "t_struct(Roadmap)3000_storage"
      },
      "t_mapping(t_uint256,t_struct(Track)3005_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EduChain.Track)",
        "numberOfBytes": "32",
        "value": "t_struct(Track)3005_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Roadmap)3000_storage": {
        "encoding": "inplace",
        "label": "struct EduChain.Roadmap",
        "members": [
          {
            "astId": 2997,
            "contract": "contracts/EduContract.sol:EduChain",
            "label": "roadName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2999,
            "contract": "contracts/EduContract.sol:EduChain",
            "label": "numberOfCheckpoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Track)3005_storage": {
        "encoding": "inplace",
        "label": "struct EduChain.Track",
        "members": [
          {
            "astId": 3002,
            "contract": "contracts/EduContract.sol:EduChain",
            "label": "progress",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3004,
            "contract": "contracts/EduContract.sol:EduChain",
            "label": "pass",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}